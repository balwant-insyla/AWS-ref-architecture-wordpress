---
AWSTemplateFormatVersion: 2010-09-09

Description: Complete WordPress on AWS - Single file template with current versions and security best practices

Parameters:
  EC2KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 Key Pair for instances
  
  AdminEmail:
    Type: String
    AllowedPattern: ^[^\s@]+@[^\s@]+\.[^\s@]+$
    Description: Admin email address
  
  DatabaseMasterUsername:
    Type: String
    MinLength: 8
    MaxLength: 16
    AllowedPattern: ^[a-zA-Z][a-zA-Z0-9]*$
    Description: Database master username
  
  DatabaseMasterPassword:
    Type: String
    NoEcho: true
    MinLength: 12
    MaxLength: 41
    AllowedPattern: ^[a-zA-Z0-9!@#$%^&*()_+\-=\[\]{}|;:,.<>?]*$
    Description: Database master password (min 12 chars)
  
  WebInstanceType:
    Type: String
    Default: t3.medium
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - m6i.large
      - m6i.xlarge
    Description: Web tier instance type
  
  DatabaseInstanceType:
    Type: String
    Default: db.t4g.medium
    AllowedValues:
      - db.t4g.micro
      - db.t4g.small
      - db.t4g.medium
      - db.t4g.large
      - db.r6g.large
      - db.r6g.xlarge
    Description: RDS Aurora instance type
  
  PublicAlbAcmCertificate:
    Type: String
    Default: ""
    Description: Optional ACM certificate ARN for HTTPS
  
  CloudFrontAcmCertificate:
    Type: String
    Default: ""
    Description: Optional CloudFront ACM certificate ARN (us-east-1)
  
  WPDomainName:
    Type: String
    Default: ""
    Description: Optional domain name for WordPress site
  
  UseCloudFront:
    Type: String
    Default: "false"
    AllowedValues: ["true", "false"]
    Description: Create CloudFront distribution
  
  UseRoute53:
    Type: String
    Default: "false"
    AllowedValues: ["true", "false"]
    Description: Create Route53 record set
  
  UseWAF:
    Type: String
    Default: "true"
    AllowedValues: ["true", "false"]
    Description: Create WAF Web ACL for protection
  
  WPTitle:
    Type: String
    Default: "WordPress on AWS"
    Description: WordPress site title
  
  WPAdminUsername:
    Type: String
    Default: "admin"
    MinLength: 4
    MaxLength: 16
    Description: WordPress admin username
  
  WPAdminPassword:
    Type: String
    NoEcho: true
    MinLength: 12
    MaxLength: 41
    Description: WordPress admin password

Conditions:
  HasSSLCertificate: !Not [!Equals [!Ref PublicAlbAcmCertificate, ""]]
  HasCloudFrontCert: !Not [!Equals [!Ref CloudFrontAcmCertificate, ""]]
  HasDomainName: !Not [!Equals [!Ref WPDomainName, ""]]
  CreateCloudFront: !Equals [!Ref UseCloudFront, "true"]
  CreateRoute53: !Equals [!Ref UseRoute53, "true"]
  CreateWAF: !Equals [!Ref UseWAF, "true"]

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-vpc'

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-igw'

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-public-1'

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-public-2'

  # Web Subnets (Private)
  WebSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/22
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-web-1'

  WebSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/22
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-web-2'

  # Data Subnets (Private)
  DataSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.100.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-data-1'

  DataSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.101.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-data-2'

  # NAT Gateway
  NATGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc

  NATGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-public-rt'

  WebRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-web-rt'

  DataRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-data-rt'

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  WebRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref WebRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway1

  DataRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref DataRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway1

  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  WebSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref WebSubnet1
      RouteTableId: !Ref WebRouteTable

  WebSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref WebSubnet2
      RouteTableId: !Ref WebRouteTable

  DataSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DataSubnet1
      RouteTableId: !Ref DataRouteTable

  DataSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DataSubnet2
      RouteTableId: !Ref DataRouteTable

  # Security Groups
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP from internet
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS from internet
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-alb-sg'

  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Web Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
          Description: HTTP from ALB
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 10.0.0.0/16
          Description: SSH from VPC
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: All outbound traffic
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-web-sg'

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Database Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref WebSecurityGroup
          Description: MySQL from web servers
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-db-sg'

  CacheSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Cache Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          SourceSecurityGroupId: !Ref WebSecurityGroup
          Description: Redis from web servers
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-cache-sg'

  EFSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EFS Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !Ref WebSecurityGroup
          Description: NFS from web servers
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-efs-sg'

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${AWS::StackName}-alb'
      Type: application
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: 'false'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-alb'

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${AWS::StackName}-tg'
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-tg'

  HTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: HasSSLCertificate
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref PublicAlbAcmCertificate

  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - !If
          - HasSSLCertificate
          - Type: redirect
            RedirectConfig:
              Protocol: HTTPS
              Port: 443
              StatusCode: HTTP_301
          - Type: forward
            TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  # RDS Subnet Group
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS
      SubnetIds:
        - !Ref DataSubnet1
        - !Ref DataSubnet2
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-db-subnet-group'

  # RDS Aurora Cluster
  DatabaseCluster:
    Type: AWS::RDS::DBCluster
    DeletionPolicy: Snapshot
    Properties:
      Engine: aurora-mysql
      EngineVersion: 8.0.mysql_aurora.3.05.2
      DatabaseName: wordpress
      MasterUsername: !Ref DatabaseMasterUsername
      MasterUserPassword: !Ref DatabaseMasterPassword
      DBSubnetGroupName: !Ref DBSubnetGroup
      VpcSecurityGroupIds:
        - !Ref DatabaseSecurityGroup
      StorageEncrypted: true
      BackupRetentionPeriod: 7
      PreferredBackupWindow: "03:00-04:00"
      PreferredMaintenanceWindow: "sun:04:00-sun:05:00"
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-aurora-cluster'

  DatabaseInstance1:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: !Ref DatabaseInstanceType
      DBClusterIdentifier: !Ref DatabaseCluster
      Engine: aurora-mysql
      PubliclyAccessible: false
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-aurora-instance-1'

  # ElastiCache Subnet Group
  CacheSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Subnet group for ElastiCache
      SubnetIds:
        - !Ref DataSubnet1
        - !Ref DataSubnet2

  # ElastiCache Redis
  CacheCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      CacheNodeType: cache.t4g.micro
      Engine: redis
      NumCacheNodes: 1
      Port: 6379
      CacheSubnetGroupName: !Ref CacheSubnetGroup
      VpcSecurityGroupIds:
        - !Ref CacheSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-redis'

  # EFS File System
  EFSFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: true
      PerformanceMode: generalPurpose
      ThroughputMode: provisioned
      ProvisionedThroughputInMibps: 100
      FileSystemTags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-efs'

  EFSMountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SubnetId: !Ref DataSubnet1
      SecurityGroups:
        - !Ref EFSSecurityGroup

  EFSMountTarget2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SubnetId: !Ref DataSubnet2
      SecurityGroups:
        - !Ref EFSSecurityGroup

  # IAM Role for Web Instances
  WebInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  WebInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref WebInstanceRole

  # Launch Template
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub '${AWS::StackName}-web-template'
      LaunchTemplateData:
        ImageId: !Sub '{{resolve:ssm:/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64}}'
        InstanceType: !Ref WebInstanceType
        KeyName: !Ref EC2KeyName
        IamInstanceProfile:
          Arn: !GetAtt WebInstanceProfile.Arn
        SecurityGroupIds:
          - !Ref WebSecurityGroup
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: 20
              VolumeType: gp3
              Encrypted: true
              DeleteOnTermination: true
        MetadataOptions:
          HttpTokens: required
          HttpPutResponseHopLimit: 2
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            
            # Update system
            dnf update -y
            
            # Install packages
            dnf install -y httpd php8.2 php8.2-mysqlnd php8.2-opcache php8.2-gd \
                          php8.2-xml php8.2-mbstring php8.2-curl php8.2-zip \
                          mariadb105 amazon-efs-utils
            
            # Configure PHP
            sed -i 's/memory_limit = .*/memory_limit = 256M/' /etc/php.ini
            sed -i 's/upload_max_filesize = .*/upload_max_filesize = 64M/' /etc/php.ini
            sed -i 's/post_max_size = .*/post_max_size = 64M/' /etc/php.ini
            
            # Mount EFS
            mkdir -p /var/www/html/wp-content
            echo "${EFSFileSystem}.efs.${AWS::Region}.amazonaws.com:/ /var/www/html/wp-content efs defaults,_netdev,tls" >> /etc/fstab
            mount -a
            
            # Download WordPress
            cd /tmp
            wget https://wordpress.org/latest.tar.gz
            tar -xzf latest.tar.gz
            cp -r wordpress/* /var/www/html/
            rm -rf wordpress latest.tar.gz
            
            # Install WP-CLI
            curl -o /usr/local/bin/wp https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
            chmod +x /usr/local/bin/wp
            
            # Configure WordPress
            cd /var/www/html
            
            # Wait for database to be ready
            until mysql -h ${DatabaseCluster.Endpoint.Address} -u ${DatabaseMasterUsername} -p${DatabaseMasterPassword} -e "SELECT 1" > /dev/null 2>&1; do
              echo "Waiting for database..."
              sleep 10
            done
            
            # Configure WordPress if not already done
            if [ ! -f wp-config.php ]; then
              wp config create --dbname=wordpress --dbuser=${DatabaseMasterUsername} \
                --dbpass='${DatabaseMasterPassword}' --dbhost=${DatabaseCluster.Endpoint.Address} \
                --allow-root
              
              # Install WordPress
              SITE_URL="http://${ApplicationLoadBalancer.DNSName}"
              wp core install --url="$SITE_URL" --title="${WPTitle}" \
                --admin_user=${WPAdminUsername} --admin_password='${WPAdminPassword}' \
                --admin_email=${AdminEmail} --allow-root
              
              # Install essential plugins
              wp plugin install redis-cache --activate --allow-root
              wp plugin install w3-total-cache --activate --allow-root
              wp plugin install wordfence --activate --allow-root
              
              # Configure Redis
              wp config set WP_REDIS_HOST ${CacheCluster.RedisEndpoint.Address} --allow-root
              wp config set WP_REDIS_PORT 6379 --allow-root
              wp config set WP_REDIS_DATABASE 0 --allow-root
              
              # Load balancer configuration
              cat >> wp-config.php << 'WPEOF'
            
            // Load balancer configuration
            if (isset($_SERVER['HTTP_X_FORWARDED_PROTO']) && $_SERVER['HTTP_X_FORWARDED_PROTO'] === 'https') {
                $_SERVER['HTTPS'] = 'on';
            }
            
            // Define home and site URL dynamically
            define('WP_HOME', 'http' . (isset($_SERVER['HTTPS']) ? 's' : '') . '://' . $_SERVER['HTTP_HOST']);
            define('WP_SITEURL', WP_HOME);
            
            // Security keys (generate new ones for production)
            define('AUTH_KEY',         'put your unique phrase here');
            define('SECURE_AUTH_KEY',  'put your unique phrase here');
            define('LOGGED_IN_KEY',    'put your unique phrase here');
            define('NONCE_KEY',        'put your unique phrase here');
            define('AUTH_SALT',        'put your unique phrase here');
            define('SECURE_AUTH_SALT', 'put your unique phrase here');
            define('LOGGED_IN_SALT',   'put your unique phrase here');
            define('NONCE_SALT',       'put your unique phrase here');
            WPEOF
            fi
            
            # Set permissions
            chown -R apache:apache /var/www/html
            chmod -R 755 /var/www/html
            
            # Start services
            systemctl enable httpd
            systemctl start httpd
            
            # Install CloudWatch agent
            dnf install -y amazon-cloudwatch-agent
            
            # Configure CloudWatch agent
            cat > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json << 'CWEOF'
            {
              "logs": {
                "logs_collected": {
                  "files": {
                    "collect_list": [
                      {
                        "file_path": "/var/log/httpd/access_log",
                        "log_group_name": "/aws/ec2/wordpress/apache/access",
                        "log_stream_name": "{instance_id}"
                      },
                      {
                        "file_path": "/var/log/httpd/error_log",
                        "log_group_name": "/aws/ec2/wordpress/apache/error",
                        "log_stream_name": "{instance_id}"
                      }
                    ]
                  }
                }
              },
              "metrics": {
                "namespace": "WordPress/EC2",
                "metrics_collected": {
                  "cpu": {
                    "measurement": ["cpu_usage_idle", "cpu_usage_iowait", "cpu_usage_user", "cpu_usage_system"],
                    "metrics_collection_interval": 60
                  },
                  "disk": {
                    "measurement": ["used_percent"],
                    "metrics_collection_interval": 60,
                    "resources": ["*"]
                  },
                  "mem": {
                    "measurement": ["mem_used_percent"],
                    "metrics_collection_interval": 60
                  }
                }
              }
            }
            CWEOF
            
            systemctl enable amazon-cloudwatch-agent
            systemctl start amazon-cloudwatch-agent
            
            # Signal completion
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}

  # Auto Scaling Group
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 6
      DesiredCapacity: 2
      VPCZoneIdentifier:
        - !Ref WebSubnet1
        - !Ref WebSubnet2
      TargetGroupARNs:
        - !Ref TargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-web-instance'
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: 2
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT15M
        WaitOnResourceSignals: true

  # Auto Scaling Policies
  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: 300
      ScalingAdjustment: 1

  ScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: 300
      ScalingAdjustment: -1

  # CloudWatch Alarms for Auto Scaling
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale up on high CPU
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 70
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup
      AlarmActions:
        - !Ref ScaleUpPolicy

  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale down on low CPU
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 25
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup
      AlarmActions:
        - !Ref ScaleDownPolicy

  # WAF Web ACL (Optional)
  WebACL:
    Type: AWS::WAFv2::WebACL
    Condition: CreateWAF
    Properties:
      Name: !Sub '${AWS::StackName}-web-acl'
      Scope: REGIONAL
      DefaultAction:
        Allow: {}
      Rules:
        - Name: AWSManagedRulesCommonRuleSet
          Priority: 1
          OverrideAction:
            None: {}
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesCommonRuleSet
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: CommonRuleSetMetric
        - Name: AWSManagedRulesKnownBadInputsRuleSet
          Priority: 2
          OverrideAction:
            None: {}
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesKnownBadInputsRuleSet
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: KnownBadInputsRuleSetMetric
        - Name: AWSManagedRulesWordPressRuleSet
          Priority: 3
          OverrideAction:
            None: {}
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesWordPressRuleSet
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: WordPressRuleSetMetric
        - Name: RateLimitRule
          Priority: 4
          Action:
            Block: {}
          Statement:
            RateBasedStatement:
              Limit: 2000
              AggregateKeyType: IP
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: RateLimitMetric
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: !Sub '${AWS::StackName}-web-acl'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-web-acl'

  # Associate WAF with ALB
  WebACLAssociation:
    Type: AWS::WAFv2::WebACLAssociation
    Condition: CreateWAF
    Properties:
      ResourceArn: !Ref ApplicationLoadBalancer
      WebACLArn: !GetAtt WebACL.Arn

  # CloudFront Distribution (Optional)
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Condition: CreateCloudFront
    Properties:
      DistributionConfig:
        Aliases:
          - !If [HasDomainName, !Ref WPDomainName, !Ref "AWS::NoValue"]
        Origins:
          - Id: ALBOrigin
            DomainName: !GetAtt ApplicationLoadBalancer.DNSName
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: !If [HasSSLCertificate, "https-only", "http-only"]
        DefaultCacheBehavior:
          TargetOriginId: ALBOrigin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD, OPTIONS, PUT, POST, PATCH, DELETE]
          CachedMethods: [GET, HEAD, OPTIONS]
          ForwardedValues:
            QueryString: true
            Headers: ["*"]
            Cookies:
              Forward: all
          MinTTL: 0
          DefaultTTL: 0
          MaxTTL: 31536000
        Enabled: true
        PriceClass: PriceClass_100
        ViewerCertificate:
          !If
            - HasCloudFrontCert
            - AcmCertificateArn: !Ref CloudFrontAcmCertificate
              SslSupportMethod: sni-only
              MinimumProtocolVersion: TLSv1.2_2021
            - CloudFrontDefaultCertificate: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-cloudfront'

  # Route53 Record Set (Optional)
  Route53RecordSet:
    Type: AWS::Route53::RecordSet
    Condition: CreateRoute53
    Properties:
      HostedZoneName: !Sub '${WPDomainName}.'
      Name: !If [HasDomainName, !Sub 'www.${WPDomainName}', !Ref "AWS::NoValue"]
      Type: A
      AliasTarget:
        DNSName: !If
          - CreateCloudFront
          - !GetAtt CloudFrontDistribution.DomainName
          - !GetAtt ApplicationLoadBalancer.DNSName
        HostedZoneId: !If
          - CreateCloudFront
          - Z2FDTNDATAQYW2  # CloudFront hosted zone ID
          - !GetAtt ApplicationLoadBalancer.CanonicalHostedZoneID

  # Bastion Host (Optional for management)
  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Bastion Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: SSH from internet (restrict this in production)
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-bastion-sg'

  BastionLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub '${AWS::StackName}-bastion-template'
      LaunchTemplateData:
        ImageId: !Sub '{{resolve:ssm:/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64}}'
        InstanceType: t3.nano
        KeyName: !Ref EC2KeyName
        SecurityGroupIds:
          - !Ref BastionSecurityGroup
        IamInstanceProfile:
          Arn: !GetAtt WebInstanceProfile.Arn
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            dnf update -y
            dnf install -y mysql

  BastionAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref BastionLaunchTemplate
        Version: !GetAtt BastionLaunchTemplate.LatestVersionNumber
      MinSize: 0
      MaxSize: 1
      DesiredCapacity: 0  # Set to 1 when needed
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-bastion-server'
          PropagateAtLaunch: true

Outputs:
  WordPressSiteURL:
    Description: WordPress Site URL
    Value: !If
      - CreateRoute53
      - !If
        - HasDomainName
        - !Sub 'https://www.${WPDomainName}'
        - !Sub 'https://${ApplicationLoadBalancer.DNSName}'
      - !If
        - CreateCloudFront
        - !Sub 'https://${CloudFrontDistribution.DomainName}'
        - !If
          - HasSSLCertificate
          - !Sub 'https://${ApplicationLoadBalancer.DNSName}'
          - !Sub 'http://${ApplicationLoadBalancer.DNSName}'
  
  CloudFrontURL:
    Condition: CreateCloudFront
    Description: CloudFront Distribution URL
    Value: !Sub 'https://${CloudFrontDistribution.DomainName}'
  
  BastionAutoScalingGroup:
    Description: Bastion Auto Scaling Group (set desired capacity to 1 when needed)
    Value: !Ref BastionAutoScalingGroup
  
  DatabaseEndpoint:
    Description: Database Endpoint
    Value: !GetAtt DatabaseCluster.Endpoint.Address
  
  EFSFileSystemId:
    Description: EFS File System ID
    Value: !Ref EFSFileSystem